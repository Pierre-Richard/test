{"version":3,"sources":["helpers/format-date.ts","helpers/format-type.ts","components/pokemon-card.tsx","services/service-pokemon.tsx","pages/pokemon-list.tsx","pages/pokemon-detail.tsx","pages/page-not-found.tsx","components/pokemon-form.tsx","pages/pokemon-edit.tsx","App.tsx","index.tsx"],"names":["formatDate","date","Date","getDate","getMonth","getFullYear","formatType","type","color","PokemonCard","pokemon","borderColor","useState","setColor","history","useHistory","className","onClick","id","push","onMouseEnter","onMouseLeave","style","src","picture","alt","name","created","types","map","PokemonService","fetch","then","response","json","catch","error","handleError","data","isEmpty","method","body","JSON","stringify","headers","Object","keys","length","console","PokemonList","pokemons","setPokemons","useEffect","getPokemons","PokemonsDetail","match","setPokemon","getPokemon","params","width","margin","to","hp","cp","PageNotFound","PokemonForm","value","isValid","form","setForm","hasType","includes","handleInputChange","e","fieldName","target","fieldValue","newField","validateForm","newForm","test","isTypesValid","onSubmit","preventDefault","updatePokemon","handleSubmit","deletePokemon","htmlFor","onChange","marginBottom","disabled","checked","concat","filter","currentType","selectType","PokemonEdit","App","exact","path","component","PokemonDetail","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.acb16c54.chunk.js","sourcesContent":[" /* Affiche le date coorectement à l'utilisateur */\n const formatDate = (date: Date = new Date()): string => {\n    return `${date.getDate()}/${date.getMonth()+1}/${date.getFullYear()}`;\n}\n\nexport default formatDate;","    const formatType = (type: string): string => {\n        let color: string;\n       \n        switch (type) {\n          case 'Feu': \n            color = 'red lighten-1'; \n            break; \n          case 'Eau': \n            color = 'blue lighten-1'; \n            break; \n          case 'Plante': \n            color = 'green lighten-1'; \n            break; \n          case 'Insecte': \n            color = 'brown lighten-1'; \n            break; \n          case 'Normal': \n            color = 'grey lighten-3'; \n            break; \n          case 'Vol': \n            color = 'blue lighten-3'; \n            break; \n          case 'Poison': \n            color = 'deep-purple accent-1'; \n            break; \n          case 'Fée': \n            color = 'pink lighten-4'; \n            break; \n          case 'Psy': \n            color = 'deep-purple darken-2'; \n            break; \n          case 'Electrik': \n            color = 'lime accent-1'; \n            break; \n          case 'Combat': \n            color = 'deep-orange'; \n            break; \n          default: \n            color = 'grey'; \n            break; \n        }\n       \n        return `chip ${color}`;\n      }\n\n      export default formatType;","import React, { FunctionComponent, useState } from 'react';\nimport Pokemon from '../models/pokemon';\nimport './pokemon-card.css';\nimport formatDate from '../helpers/format-date';\nimport formatType from '../helpers/format-type';\n/* j importe useHistory depuis react-router-dom */\nimport { useHistory } from 'react-router-dom';\n\ntype Props = {\n  pokemon: Pokemon\n  borderColor?: string\n};\n  /* je definis la couleur par defaut de mes bodures */\nconst PokemonCard: FunctionComponent<Props> = ({pokemon, borderColor ='#009688'}) => {\n    \n\n    /* je stock dans mon state la couleur de ma bordure */\n    /* setColor me permet de modifier la couleur de mon State */\n    const [ color ,setColor] = useState<string>();\n\n    const history = useHistory();\n\n    const showBorder = () => {\n        setColor(borderColor); // je montre la couleur de ma bordure ! \n    }\n\n    const hideBorder = () => {\n        setColor('#f5f5f5'); // je remets la couleur ene gris\n    }\n\n    const goToPokemon = (id: number) => {\n      history.push(`/pokemons/${id}`);\n    }\n\n  return (\n    <div className=\"col s6 m4\" onClick={() => goToPokemon(pokemon.id)} onMouseEnter={showBorder} onMouseLeave={hideBorder} >\n      <div className=\"card horizontal\" style= {{ borderColor: color }}>\n        <div className=\"card-image\"> \n          <img src={pokemon.picture} alt={pokemon.name}/>\n        </div>\n        <div className=\"card-stacked\">\n          <div className=\"card-content\">\n            <p>{pokemon.name}</p>\n            <p><small>{formatDate(pokemon.created)}</small></p>\n            {pokemon.types.map(type => ( \n                <span key={type} className={formatType(type)}>{type}</span>\n                ))}\n          </div>\n        </div>\n      </div> \n    </div>\n  );\n}\n  \nexport default PokemonCard;","import Pokemon from \"../models/pokemon\";\n \nexport default class PokemonService {\n \n  static getPokemons(): Promise<Pokemon[]> {\n    return fetch('http://localhost:3001/pokemons')\n      .then(response => response.json())\n      .catch(error => this.handleError(error));\n  }\n \n  static getPokemon(id: number): Promise<Pokemon|null> {\n    return fetch(`http://localhost:3001/pokemons/${id}`)\n      .then(response => response.json())\n      .then(data => this.isEmpty(data) ? null : data)\n      .catch(error => this.handleError(error));\n  }\n\n  static updatePokemon(pokemon: Pokemon): Promise<Pokemon> {\n      return fetch (`http://localhost:3001/pokemons/${pokemon.id}`, {\n          /* je definis le type de la requette */\n      method: 'PUT' ,\n      body: JSON.stringify(pokemon),\n      headers: {'Content-Type': 'application/json'  }\n      })\n      .then(response =>response.json())\n      .catch(error =>this.handleError(error));\n  }\n\n  static deletePokemon(pokemon: Pokemon): Promise<[]> {\n    return fetch (`http://localhost:3001/pokemons/${pokemon.id}`, {\n        /* je definis le type de la requette */\n    method: 'DELETE' ,\n    headers: {'Content-Type': 'application/json'  }\n    })\n    .then(response =>response.json())\n    .catch(error =>this.handleError(error));\n}\n\n\n \n  static isEmpty(data: Object): boolean {\n    return Object.keys(data).length === 0;\n  }\n\n  static handleError(error: Error): void {\n      console.error(error);\n  }\n}\n","import React, { FunctionComponent, useState, useEffect } from 'react';\nimport Pokemon from '../models/pokemon';\nimport PokemonCard from '../components/pokemon-card';\nimport PokemonService from '../services/service-pokemon';\n  \nconst PokemonList: FunctionComponent = () => {\n  const [pokemons, setPokemons] = useState<Pokemon[]>([]);\n  \n  useEffect(() => {\n    /* j'utilise mon service pour pouvoir recuperer la liste des pokemons depuis l'api rest  */\n    /* et je mets à jour l'etat de mon composant avec les pokemons reçu */\n    PokemonService.getPokemons().then(pokemons => setPokemons(pokemons))\n  }, []);\n  \n  return (\n    <div>\n      <h1 className=\"center\">Pokédex</h1>\n      <div className=\"container\"> \n        <div className=\"row\"> \n        {pokemons.map(pokemon => (\n          <PokemonCard key={pokemon.id} pokemon={pokemon}/>\n        ))}\n        </div>\n      </div>\n    </div> \n  );\n}\n  \nexport default PokemonList;","import React, { FunctionComponent, useState, useEffect } from 'react';\nimport { RouteComponentProps, Link } from 'react-router-dom';\nimport Pokemon from '../models/pokemon';\nimport formatDate from '../helpers/format-date';\nimport formatType from '../helpers/format-type';\nimport PokemonService from '../services/service-pokemon';\n\n/* je définis un type params pour pouvoir recuperer id dans l'url */\ntype Params = { id: string };\n  /* j'ai utilise RouteComponentProps pour typer le paramettre récu deppuis le router */\n  /* objet match contiens les données passées par le router */\nconst PokemonsDetail: FunctionComponent<RouteComponentProps<Params>> = ({ match }) => {\n    /* je definis un state pour sauvegarder le pokemon à afficher */\n    /* par defaut le state contiens la valeur null */\n  const [pokemon, setPokemon] = useState<Pokemon|null>(null);\n  \n  useEffect(() => {\n    PokemonService.getPokemon(+match.params.id).then(pokemon => setPokemon(pokemon));\n  }, [match.params.id]);\n    \n  return (\n    <div>\n        {/* ici je definis une condition si pokemon existe tu me l'affiche */}\n      { pokemon ? (\n        <div className=\"row\">\n          <div className=\"col s12 m8 offset-m2\"> \n            <h2 className=\"header center\">{ pokemon.name }</h2>\n            <div className=\"card hoverable\"> \n              <div className=\"card-image\">\n                <img src={pokemon.picture} alt={pokemon.name} style={{width: '250px', margin: '0 auto'}}/>\n                <Link to={`/pokemons/edit/${pokemon.id}`} className=\"btn btn-floting halfway-fab waves-effet waves-light\">\n                  <i className=\"material-icons\">edit</i>\n                </Link>\n              </div>\n              <div className=\"card-stacked\">\n                <div className=\"card-content\">\n                  <table className=\"bordered striped\">\n                    <tbody>\n                      <tr> \n                        <td>Nom</td> \n                        <td><strong>{ pokemon.name }</strong></td> \n                      </tr>\n                      <tr> \n                        <td>Points de vie</td> \n                        <td><strong>{ pokemon.hp }</strong></td> \n                      </tr> \n                      <tr> \n                        <td>Dégâts</td> \n                        <td><strong>{ pokemon.cp }</strong></td> \n                      </tr> \n                      <tr> \n                        <td>Types</td> \n                        <td>\n                          {pokemon.types.map(type => (\n                           <span key={type} className={formatType(type)}>{type}</span>\n                          ))}</td> \n                      </tr> \n                      <tr> \n                        <td>Date de création</td> \n                        <td>{formatDate(pokemon.created)}</td> \n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n                <div className=\"card-action\">\n                    {/* link me permet de générer un lien */}\n                  <Link to=\"/\">Retour</Link>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        /* sinon tu m'affichera le h4 ! */\n      ) : (\n        <h4 className=\"center\">Aucun pokémon à afficher !</h4>\n      )}\n    </div>\n  );\n}\n  \nexport default PokemonsDetail;","import React, { FunctionComponent } from 'react';\nimport { Link } from 'react-router-dom';\n  \nconst PageNotFound: FunctionComponent = () => {\n  \n  return (\n    <div className=\"center\">\n      <img src=\"http://assets.pokemon.com/assets/cms2/img/pokedex/full/035.png\" alt=\"Page non trouvée\"/>\n      <h1>Hey, cette page n'existe pas !</h1> \n      <Link to=\"/\" className=\"waves-effect waves-teal btn-flat\">\n        Retourner à l'accueil\n      </Link>\n    </div>\n  );\n}\n  \nexport default PageNotFound;","import React, { FunctionComponent, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Pokemon from '../models/pokemon';\nimport formatType from '../helpers/format-type';\nimport PokemonService from '../services/service-pokemon';\n  \ntype Props = {\n  pokemon: Pokemon\n};\n\n/* je declare Field pour pouvoir modaliser un champs dans mon formaulaire  */\ntype Field = {\n  value?: any,\n  error?: string,\n  isValid?: boolean\n}\n\n/* ce type represente le formulaire avec la liste de champs disponible   */\ntype Form = {\n  name: Field,\n  hp: Field,\n  cp: Field,\n  types: Field\n}\n  \nconst PokemonForm: FunctionComponent<Props> = ({pokemon}) => {\n  \n  /*  je declare mon state qui represente les données et les champs du formulaire */\n  const [form, setForm] = useState<Form> ({\n    name: { value: pokemon.name , isValid: true},\n    hp: { value: pokemon.hp , isValid: true},\n    cp: { value: pokemon.cp , isValid: true},\n    types: { value: pokemon.types , isValid: true}\n  })\n  \n  const history = useHistory();\n\n  const types: string[] = [\n    'Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik',\n    'Poison', 'Fée', 'Vol', 'Combat', 'Psy'\n  ];\n\n  const hasType = (type: string ): boolean => {\n    return form.types.value.includes(type);\n  }\n\n  /*  */\n   \n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const fieldName: string = e.target.name;\n    const fieldValue: string = e.target.value;\n    const newField: Field = {[fieldName]: {value: fieldValue}};\n\n    setForm({...form, ...newField});\n\n  }\n\n  const selectType = (type: string, e: React.ChangeEvent<HTMLInputElement>): void => {\n    const checked = e.target.checked;\n    let newField: Field;\n\n    if(checked) {\n      // Si l'utilisateur coche un type, à l'ajoute à la liste des types du pokémon.\n      const newTypes: string[] = form.types.value.concat([type]);\n      newField = { value: newTypes };\n    } else {\n      // Si l'utilisateur décoche un type, on le retire de la liste des types du pokémon.\n      const newTypes: string[] = form.types.value.filter((currentType: string) => currentType !== type);\n      newField = { value: newTypes };\n    }\n\n    setForm({...form, ...{ types: newField }});\n  }\n\n  /* cette methode est chargé du comportement du formulaire */\n  const handleSubmit =(e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const isFormValid = validateForm();\n    if(isFormValid){\n      pokemon.name = form.name.value;\n      pokemon.hp = form.hp.value;\n      pokemon.cp = form.cp.value;\n      pokemon.types = form.types.value;\n      PokemonService.updatePokemon(pokemon).then(() => history.push(`/pokemons/${pokemon.id}`));\n    }\n    \n  }\n\n\n  const validateForm = () => {\n    let newForm: Form = form;\n    \n    // Validator name\n    if(!/^[a-zA-Zàéè ]{3,25}$/.test(form.name.value)) {\n      const errorMsg: string = 'Le nom du pokémon est requis (1-25).';\n      const newField: Field = { value: form.name.value, error: errorMsg, isValid: false };\n      newForm = { ...newForm, ...{ name: newField } };\n    } else {\n      const newField: Field = { value: form.name.value, error: '', isValid: true };\n      newForm = { ...newForm, ...{ name: newField } };\n    }\n\n    // Validator hp\n    if(!/^[0-9]{1,3}$/.test(form.hp.value)) {\n      const errorMsg: string = 'Les points de vie du pokémon sont compris entre 0 et 999.';\n      const newField: Field = {value: form.hp.value, error: errorMsg, isValid: false};\n      newForm = { ...newForm, ...{ hp: newField } };\n    } else {\n      const newField: Field = { value: form.hp.value, error: '', isValid: true };\n      newForm = { ...newForm, ...{ hp: newField } };\n    }\n\n    // Validator cp\n    if(!/^[0-9]{1,2}$/.test(form.cp.value)) {\n      const errorMsg: string = 'Les dégâts du pokémon sont compris entre 0 et 99';\n      const newField: Field = {value: form.cp.value, error: errorMsg, isValid: false};\n      newForm = { ...newForm, ...{ cp: newField } };\n    } else {\n      const newField: Field = { value: form.cp.value, error: '', isValid: true };\n      newForm = { ...newForm, ...{ cp: newField } };\n    }\n\n    setForm(newForm);\n    return newForm.name.isValid && newForm.hp.isValid && newForm.cp.isValid;\n  }\n\n  const isTypesValid = (type: string): boolean => {\n    // Cas n°1: Le pokémon a un seul type, qui correspond au type passé en paramètre.\n    // Dans ce cas on revoie false, car l'utilisateur ne doit pas pouvoir décoché ce type (sinon le pokémon aurait 0 type, ce qui est interdit)\n    if (form.types.value.length === 1 && hasType(type)) {\n      return false;\n    }\n    \n    // Cas n°1: Le pokémon a au moins 3 types.\n    // Dans ce cas il faut empêcher à l'utilisateur de cocher un nouveau type, mais pas de décocher les types existants.\n    if (form.types.value.length >= 3 && !hasType(type)) { \n      return false; \n    } \n    \n    // Après avoir passé les deux tests ci-dessus, on renvoie 'true', \n    // c'est-à-dire que l'on autorise l'utilisateur à cocher ou décocher un nouveau type.\n    return true;\n  } \n\n   const deletePokemon = () => {\n     PokemonService.deletePokemon(pokemon).then(() => history.push(`/pokemons`));\n   }\n\n\n\n  return (\n    <form onSubmit={e => handleSubmit(e)}>\n      <div className=\"row\">\n        <div className=\"col s12 m8 offset-m2\">\n          <div className=\"card hoverable\"> \n            <div className=\"card-image\">\n              <img src={pokemon.picture} alt={pokemon.name} style={{width: '250px', margin: '0 auto'}}/>\n              <span className=\"btn-floating halway-fab waves-effet waves-light\">\n                <i onClick={deletePokemon} className=\"material-icons\">delete</i>\n              </span>\n            </div>\n            <div className=\"card-stacked\">\n              <div className=\"card-content\">\n                {/* Pokemon name */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"name\">Nom</label>\n                  <input id=\"name\" name=\"name\" type=\"text\" className=\"form-control\" value={form.name.value} onChange={ e => handleInputChange(e)}></input>\n                  {form.name.error && \n                  <div className=\"card-panel red accent-1\">\n                    {form.name.error}\n                  </div>\n                  }\n                </div>\n                {/* Pokemon hp */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"hp\">Point de vie</label>\n                  <input id=\"hp\" name=\"hp\" type=\"number\" className=\"form-control\" value={form.hp.value} onChange={ e => handleInputChange(e)} ></input>\n                  {form.hp.error && \n                  <div className=\"card-panel red accent-1\">\n                    {form.hp.error}\n                  </div>\n                  }\n                </div>\n                {/* Pokemon cp */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"cp\">Dégâts</label>\n                  <input id=\"cp\" name=\"cp\" type=\"number\" className=\"form-control\" value={form.cp.value} onChange={ e => handleInputChange(e)}></input>\n                  {form.cp.error && \n                  <div className=\"card-panel red accent-1\">\n                    {form.cp.error}\n                  </div>\n                  }\n                </div>\n                {/* Pokemon types */}\n                <div className=\"form-group\">\n                  <label>Types</label>\n                  {types.map(type => (\n                    <div key={type} style={{marginBottom: '10px'}}>\n                      <label>\n                        <input id={type} type=\"checkbox\" className=\"filled-in\" value={type} disabled={!isTypesValid(type)} checked={hasType(type)} onChange={e => selectType(type, e)}></input>\n                        <span>\n                          <p className={formatType(type)}>{ type }</p>\n                        </span>\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              </div>\n              <div className=\"card-action center\">\n                {/* Submit button */}\n                <button type=\"submit\" className=\"btn\">Valider</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </form>\n  );\n};\n   \nexport default PokemonForm;","import React, { FunctionComponent, useState, useEffect } from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport PokemonForm from '../components/pokemon-form';\nimport Pokemon from '../models/pokemon';\nimport PokemonService from '../services/service-pokemon';\n \ntype Params = { id: string };\n  \nconst PokemonEdit: FunctionComponent<RouteComponentProps<Params>> = ({ match }) => {\n    \n  const [pokemon, setPokemon] = useState<Pokemon|null>(null);\n  \n  useEffect(() => {\n    PokemonService.getPokemon(+match.params.id).then(pokemon => setPokemon(pokemon));\n  }, [match.params.id]);\n    \n  return (\n    <div>\n      { pokemon ? (\n        <div className=\"row\">\n            <h2 className=\"header center\">Éditer { pokemon.name }</h2>\n            <PokemonForm pokemon={pokemon}></PokemonForm>\n        </div>\n      ) : (\n        <h4 className=\"center\">Aucun pokémon à afficher !</h4>\n      )}\n    </div>\n  );\n}\n  \nexport default PokemonEdit;","import React, { FunctionComponent } from 'react';\nimport PokemonList from './pages/pokemon-list';\nimport PokemonDetail from './pages/pokemon-detail';\n/* l'element router parmet de mettre en place le systeme de navigation */\n/* Switch affiche le contenu d'un seule route à la fois */\n/* Route décris chaque route de mon application */\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport PageNotFound from './pages/page-not-found';\nimport PokemonEdit from './pages/pokemon-edit';\n\nconst App: FunctionComponent = () => {\n\n return (\n   <Router>\n      <div>\n         {/* Laa barre de navigation commun à toutes les pages */}\n         <nav>\n            <div>\n               <div className=\"nav-wrapper teal\">\n                  <Link to=\"/\" className=\"brand-logo center\">Pokédex</Link>\n               </div>\n            </div>\n         </nav>\n         {/* Le Sytème des routes de notre application */}\n         <Switch>\n            <Route exact path=\"/\" component={PokemonList} />\n            <Route exact path=\"/Pokemons\" component={PokemonList} />\n            <Route path=\"/pokemons/edit/:id\" component={PokemonEdit} />\n            <Route path=\"/pokemons/:id\" component={PokemonDetail} />\n            <Route component={PageNotFound} />\n         </Switch>\n      </div>\n   </Router>\n )\n }\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'materialize-css/dist/css/materialize.min.css';\n\nReactDOM.render(\n     <App />,\n     document.getElementById('root')\n);"],"sourceRoot":""}